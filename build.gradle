plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.8'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}

group 'org.sustain.census'
version '1.0-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.8

// updating the version in our release process.
def grpcVersion = '1.28.1' // CURRENT_GRPC_VERSION
def nettyTcNativeVersion = '2.0.30.Final'
def protocVersion = '3.11.0'

dependencies {
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"
    runtimeOnly "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8'

    // this is for mysql java connector
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.15'
    runtime "mysql:mysql-connector-java:8.0.15"

//    testCompile "io.grpc:grpc-testing:${grpcVersion}"
//    testCompile "junit:junit:4.12"
//    testCompile "org.mockito:mockito-core:1.9.5"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}


// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

//jar {
//    manifest {
//        attributes "Main-Class": "org.sustain.census.CensusServer"
//    }
//    from {
//        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//}


startScripts.enabled = false

task censusServer(type: CreateStartScripts) {
    mainClassName = 'org.sustain.census.CensusServer'
    applicationName = 'census-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task censusClient(type: CreateStartScripts) {
    mainClassName = 'org.sustain.census.CensusClient'
    applicationName = 'census-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(censusServer)
    from(censusClient)
    fileMode = 0755
}
