syntax = "proto3";

import "google/api/http.proto";

option java_multiple_files = true;
option java_package = "org.sustain.census";
option java_outer_classname = "SustainCensus";
//option objc_class_prefix = "";

package census;

service Census {
  // spatial query with MongoDB support
  rpc SpatialQuery(SpatialRequest) returns (SpatialResponse) {}

  // targeted queries - return geographical areas that satisfy a given value range of a census feature
  // Example 1: Retrieve all counties where (population >= 1,000,000)
  // Example 2: Retrieve all tracts where (median household income < $50,000/year)
  rpc ExecuteTargetedQuery(TargetedQueryRequest) returns (TargetedQueryResponse) {}
}

message SpatialRequest {
  CensusResolution censusResolution = 1;
  CensusFeature censusFeature = 2;
  string requestGeoJson = 3;   // bounding polygon
  SpatialOp spatialOp = 4;
}

message SpatialResponse {
  repeated SingleSpatialResponse singleSpatialResponse = 1;
}

message SingleSpatialResponse {
  string data = 1;
  string responseGeoJson = 2;   // geoJson associated with 'data'
}

enum SpatialOp {
  GeoWithin = 0;
  GeoIntersects = 1;
}

enum CensusFeature {
  TotalPopulation = 0;
  MedianHouseholdIncome = 1;
  PopulationByAge = 2;
  MedianAge = 3;
  Poverty = 4;
  Race = 5;
}

enum Datasets {
  Hospitals = 0;
  TransmissionLines = 1;
  NaturalGasPipelines = 2;
  PowerPlants = 3;
  FireStations = 4;
  Dams = 5;
  ElectricalSubstations = 6;
}

message TargetedQueryRequest {
  CensusResolution resolution = 1;
  Predicate predicate = 2;
  SpatialOp spatialOp = 3;
  string requestGeoJson = 4;   // bounding polygon
}

message TargetedQueryResponse {
  repeated SingleSpatialResponse singleSpatialResponse = 1;
}

enum CensusResolution {
  State = 0;
  County = 1;
  Tract = 2;
}

enum Decade {
  _2010 = 0;
  _2000 = 1;
  _1990 = 2;
  _1980 = 3;
}

message Predicate {
  enum ComparisonOperator {
    EQUAL = 0;
    GREATER_THAN = 1;
    LESS_THAN = 2;
    GREATER_THAN_OR_EQUAL = 3;
    LESS_THAN_OR_EQUAL = 4;
  }
  CensusFeature censusFeature = 1;
  Decade decade = 2;
  ComparisonOperator comparisonOp = 3;
  double comparisonValue = 4;
}

